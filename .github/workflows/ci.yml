name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]

env:
  APP_NAME: "todoapp"
  APP_DIR: "/opt/todoapp"
  SERVICE_NAME: "todoapp.service"
  JAR_FILE: "todoapp-0.0.1-SNAPSHOT.jar"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Run tests
        run: mvn test

      - name: Verify JAR exists
        run: |
          if [ ! -f target/${{ env.JAR_FILE }} ]; then
            echo "::error::JAR file not found in target directory!"
            ls -la target/
            exit 1
          fi

      - name: Debug JAR location
        run: |
          echo "Workspace: $(pwd)"
          echo "JAR path: target/${{ env.JAR_FILE }}"
          stat target/${{ env.JAR_FILE }}

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Creating application directory..."
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} ${{ env.APP_DIR }}
            sudo chmod 755 ${{ env.APP_DIR }}
            echo "Directory created:"
            ls -ld ${{ env.APP_DIR }}
            echo "Testing write permissions..."
            touch ${{ env.APP_DIR }}/testfile && rm ${{ env.APP_DIR }}/testfile
            echo "Write test successful"

      - name: Copy JAR to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/${{ env.JAR_FILE }}"
          target: "${{ env.APP_DIR }}/"
          strip_components: 0
          rm: false
          overwrite: true

      - name: Verify file transfer
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Contents of ${{ env.APP_DIR }}:"
            ls -la ${{ env.APP_DIR }}
            if [ -f "${{ env.APP_DIR }}/${{ env.JAR_FILE }}" ]; then
              echo "JAR verification:"
              stat ${{ env.APP_DIR }}/${{ env.JAR_FILE }}
              echo "File size: $(du -h ${{ env.APP_DIR }}/${{ env.JAR_FILE }} | cut -f1)"
            else
              echo "::error::JAR file not found on server!"
              exit 1
            fi

      - name: Deploy and restart service
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -e
            echo "=== Deployment Started ==="
            
            echo "Current JAR version:"
            ls -lt ${{ env.APP_DIR }}/todoapp-*.jar | head -n 1
            
            echo "Creating systemd service..."
            sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }} > /dev/null <<EOF
            [Unit]
            Description=TodoApp Service
            After=network.target
            
            [Service]
            User=${{ secrets.SSH_USERNAME }}
            WorkingDirectory=${{ env.APP_DIR }}
            ExecStart=/usr/bin/java -jar ${{ env.APP_DIR }}/${{ env.JAR_FILE }}
            SuccessExitStatus=143
            Restart=always
            RestartSec=30
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            echo "Reloading systemd..."
            sudo systemctl daemon-reload
            sudo systemctl enable ${{ env.SERVICE_NAME }}
            
            echo "Checking service status..."
            if systemctl is-active --quiet ${{ env.SERVICE_NAME }}; then
              echo "Restarting existing service..."
              sudo systemctl restart ${{ env.SERVICE_NAME }}
            else
              echo "Starting new service..."
              sudo systemctl start ${{ env.SERVICE_NAME }}
            fi
            
            sleep 5
            echo "Final service status:"
            sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager

      - name: Verify deployment
        run: |
          echo "=== Deployment Successful ==="
          echo "Application deployed to: ${{ secrets.SSH_HOST }}"
          echo "Access the application at: http://${{ secrets.SSH_HOST }}:8080"
          echo "Service name: ${{ env.SERVICE_NAME }}"
          echo "JAR location: ${{ env.APP_DIR }}/${{ env.JAR_FILE }}"