name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]

env:
  APP_NAME: "todoapp"
  APP_DIR: "/opt/todoapp"
  SERVICE_NAME: "todoapp.service"
  JAR_FILE: "todoapp-0.0.1-SNAPSHOT.jar"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Run tests
        run: mvn test

      - name: Verify and prepare JAR
        run: |
          # Verify JAR exists
          if [ ! -f "target/${{ env.JAR_FILE }}" ]; then
            echo "::error::JAR file not found!"
            ls -la target/
            exit 1
          fi
          
          # Rename JAR to standardized name
          mv "target/${{ env.JAR_FILE }}" "target/todoapp.jar"
          echo "JAR prepared: $(ls -la target/todoapp.jar)"

      - name: Setup remote environment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Clean setup
            sudo rm -rf ${{ env.APP_DIR }}
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} ${{ env.APP_DIR }}
            sudo chmod -R 755 ${{ env.APP_DIR }}
            echo "Directory prepared:"
            ls -ld ${{ env.APP_DIR }}

      - name: Transfer JAR file
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/todoapp.jar"
          target: "${{ env.APP_DIR }}/"
          strip_components: 0
          overwrite: true
          timeout: 60s

      - name: Verify deployment files
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deployment contents:"
            ls -la ${{ env.APP_DIR }}
            
            if [ ! -f "${{ env.APP_DIR }}/todoapp.jar" ]; then
              echo "::error::JAR file not found in target directory!"
              exit 1
            fi
            
            echo "JAR verified:"
            stat "${{ env.APP_DIR }}/todoapp.jar"

      - name: Configure and start service
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Setup systemd service
            echo "Creating service configuration..."
            sudo bash -c 'cat > /etc/systemd/system/${{ env.SERVICE_NAME }} <<EOF
            [Unit]
            Description=TodoApp Service
            After=network.target
            
            [Service]
            User=${{ secrets.SSH_USERNAME }}
            WorkingDirectory=${{ env.APP_DIR }}
            ExecStart=/usr/bin/java -jar ${{ env.APP_DIR }}/todoapp.jar
            SuccessExitStatus=143
            Restart=always
            RestartSec=30
            
            [Install]
            WantedBy=multi-user.target
            EOF'
            
            # Reload and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable ${{ env.SERVICE_NAME }}
            
            # Restart service
            echo "Restarting service..."
            sudo systemctl restart ${{ env.SERVICE_NAME }}
            
            # Verify status
            sleep 3
            echo "Service status:"
            sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager

      - name: Final verification
        run: |
          echo "=== Deployment Successful ==="
          echo "Application URL: http://${{ secrets.SSH_HOST }}:8080"
          echo "Service management:"
          echo "  ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'sudo systemctl status ${{ env.SERVICE_NAME }}'"