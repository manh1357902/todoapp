<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/ci.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/ci.yml" />
              <option name="originalContent" value="name: Java CI/CD with Maven&#10;&#10;on:&#10;  push:&#10;    branches: [ &quot;main&quot; ]&#10;&#10;env:&#10;  APP_NAME: &quot;todoapp&quot;&#10;  APP_DIR: &quot;/opt/todoapp&quot;&#10;  SERVICE_NAME: &quot;todoapp.service&quot;&#10;&#10;jobs:&#10;  build-and-deploy:&#10;    runs-on: ubuntu-latest&#10;&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up JDK 17&#10;        uses: actions/setup-java@v4&#10;        with:&#10;          java-version: '17'&#10;          distribution: 'temurin'&#10;          cache: 'maven'&#10;&#10;      - name: Deploy to Ubuntu Server&#10;            exit 1&#10;          fi&#10;&#10;      - name: Copy JAR to server&#10;        uses: appleboy/scp-action@v0.1.7&#10;        with:&#10;            # Tạo thư mục ứng dụng&#10;            sudo mkdir -p /opt/todoapp&#10;&#10;            # Copy file JAR từ GitHub Actions&#10;            sudo scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/target/todoapp-*.jar /opt/todoapp/&#10;&#10;            # Tạo systemd service&#10;            echo &quot;[Unit]&#10;            Description=TodoApp Service&#10;            After=mysql.service&#10;&#10;            [Service]&#10;            User=ubuntu&#10;            ExecStart=/usr/bin/java -jar /opt/todoapp/todoapp-*.jar&#10;            Restart=always&#10;            Environment=&quot;SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/todoapp&quot;&#10;            Environment=&quot;SPRING_DATASOURCE_USERNAME=todo_user&quot;&#10;            Environment=&quot;SPRING_DATASOURCE_PASSWORD=StrongPassword@123&quot;&#10;&#10;            [Install]&#10;            WantedBy=multi-user.target&quot; | sudo tee /etc/systemd/system/todoapp.service&#10;&#10;            # Khởi động ứng dụng&#10;            sudo systemctl daemon-reload&#10;            sudo systemctl enable todoapp.service&#10;            sudo systemctl start todoapp.service&#10;            sudo mkdir -p ${{ env.APP_DIR }}&#10;            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} ${{ env.APP_DIR }}&#10;            &#10;            # Tìm file JAR mới nhất&#10;            LATEST_JAR=$(ls -t ${{ env.APP_DIR }}/${{ env.APP_NAME }}-*.jar | head -n 1)&#10;            &#10;            # Tạo systemd service file&#10;            echo &quot;[Unit]&#10;            Description=TodoApp Service&#10;            After=mysql.service&#10;            Requires=mysql.service&#10;            &#10;            [Service]&#10;            User=${{ secrets.SSH_USERNAME }}&#10;            WorkingDirectory=${{ env.APP_DIR }}&#10;            ExecStart=/usr/bin/java -jar $LATEST_JAR&#10;            SuccessExitStatus=143&#10;            Restart=always&#10;            RestartSec=30&#10;            Environment=\&quot;SPRING_DATASOURCE_URL=${{ secrets.DB_URL || 'jdbc:mysql://localhost:3306/todoapp' }}\&quot;&#10;            Environment=\&quot;SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}\&quot;&#10;            Environment=\&quot;SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}\&quot;&#10;            Environment=\&quot;SPRING_PROFILES_ACTIVE=production\&quot;&#10;            &#10;            [Install]&#10;            WantedBy=multi-user.target&quot; | sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}&#10;            &#10;            # Cấu hình logrotate&#10;            echo &quot;${{ env.APP_DIR }}/logs/*.log {&#10;              daily&#10;              missingok&#10;              rotate 14&#10;              compress&#10;              delaycompress&#10;              notifempty&#10;              create 0640 ${{ secrets.SSH_USERNAME }} ${{ secrets.SSH_USERNAME }}&#10;              sharedscripts&#10;              postrotate&#10;                systemctl restart ${{ env.SERVICE_NAME }}&#10;              endscript&#10;            }&quot; | sudo tee /etc/logrotate.d/${{ env.APP_NAME }}&#10;            &#10;            # Khởi động lại service&#10;            sudo systemctl daemon-reload&#10;            sudo systemctl enable ${{ env.SERVICE_NAME }}&#10;            &#10;            # Kiểm tra trạng thái service&#10;            if ! sudo systemctl restart ${{ env.SERVICE_NAME }}; then&#10;              echo &quot;::error::Failed to restart service&quot;&#10;              journalctl -u ${{ env.SERVICE_NAME }} -b --no-pager -n 50&#10;              exit 1&#10;            fi&#10;            &#10;            # Verify service is running&#10;            sleep 5&#10;            SERVICE_STATUS=$(systemctl is-active ${{ env.SERVICE_NAME }})&#10;            if [ &quot;$SERVICE_STATUS&quot; != &quot;active&quot; ]; then&#10;              echo &quot;::error::Service failed to start&quot;&#10;              journalctl -u ${{ env.SERVICE_NAME }} -b --no-pager -n 50&#10;              exit 1&#10;            fi&#10;&#10;      - name: Verify deployment&#10;        run: |&#10;          echo &quot;Deployment successful!&quot;&#10;          echo &quot;Application should be available at: http://${{ secrets.SSH_HOST }}:8080&quot;" />
              <option name="updatedContent" value="name: Java CI/CD with Maven&#10;&#10;on:&#10;  push:&#10;    branches: [ &quot;main&quot; ]&#10;&#10;env:&#10;  APP_NAME: &quot;todoapp&quot;&#10;  APP_DIR: &quot;/opt/todoapp&quot;&#10;  SERVICE_NAME: &quot;todoapp.service&quot;&#10;&#10;jobs:&#10;  build-and-deploy:&#10;    runs-on: ubuntu-latest&#10;&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up JDK 17&#10;        uses: actions/setup-java@v4&#10;        with:&#10;          java-version: '17'&#10;          distribution: 'temurin'&#10;          cache: 'maven'&#10;&#10;      - name: Build with Maven&#10;        run: mvn -B clean package --file pom.xml&#10;&#10;      - name: Run tests&#10;        run: mvn test&#10;&#10;      - name: Verify JAR exists&#10;        run: |&#10;          if [ ! -f target/todoapp-0.0.1-SNAPSHOT.jar ]; then&#10;            echo &quot;::error::JAR file not found!&quot;&#10;            exit 1&#10;          fi&#10;&#10;      - name: Copy JAR to server&#10;        uses: appleboy/scp-action@v0.1.7&#10;        with:&#10;          host: ${{ secrets.SSH_HOST }}&#10;          port: ${{ secrets.SSH_PORT || '22' }}&#10;          username: ${{ secrets.SSH_USERNAME }}&#10;          key: ${{ secrets.SSH_PRIVATE_KEY }}&#10;          source: &quot;target/todoapp-0.0.1-SNAPSHOT.jar&quot;&#10;          target: &quot;/opt/todoapp/&quot;&#10;          rm: true&#10;          strip_components: 1&#10;&#10;      - name: Deploy and restart service&#10;        uses: appleboy/ssh-action@v1&#10;        with:&#10;          host: ${{ secrets.SSH_HOST }}&#10;          port: ${{ secrets.SSH_PORT || '22' }}&#10;          username: ${{ secrets.SSH_USERNAME }}&#10;          key: ${{ secrets.SSH_PRIVATE_KEY }}&#10;          script: |&#10;            #!/bin/bash&#10;            set -e&#10;            sudo mkdir -p /opt/todoapp&#10;            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /opt/todoapp&#10;            LATEST_JAR=$(ls -t /opt/todoapp/todoapp-0.0.1-SNAPSHOT.jar | head -n 1)&#10;            echo &quot;[Unit]&#10;            Description=TodoApp Service&#10;            After=network.target&#10;            [Service]&#10;            User=${{ secrets.SSH_USERNAME }}&#10;            WorkingDirectory=/opt/todoapp&#10;            ExecStart=/usr/bin/java -jar $LATEST_JAR&#10;            SuccessExitStatus=143&#10;            Restart=always&#10;            RestartSec=30&#10;            [Install]&#10;            WantedBy=multi-user.target&quot; | sudo tee /etc/systemd/system/todoapp.service&#10;            sudo systemctl daemon-reload&#10;            sudo systemctl enable todoapp.service&#10;            if ! sudo systemctl restart todoapp.service; then&#10;              echo &quot;::error::Failed to restart service&quot;&#10;              journalctl -u todoapp.service -b --no-pager -n 50&#10;              exit 1&#10;            fi&#10;            sleep 5&#10;            SERVICE_STATUS=$(systemctl is-active todoapp.service)&#10;            if [ &quot;$SERVICE_STATUS&quot; != &quot;active&quot; ]; then&#10;              echo &quot;::error::Service failed to start&quot;&#10;              journalctl -u todoapp.service -b --no-pager -n 50&#10;              exit 1&#10;            fi&#10;&#10;      - name: Verify deployment&#10;        run: |&#10;          echo &quot;Deployment successful!&quot;&#10;          echo &quot;Application should be available at: http://${{ secrets.SSH_HOST }}:8080&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;todoapp&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;    &lt;name&gt;todoapp&lt;/name&gt;&#10;    &lt;description&gt;Spring Boot Todo App&lt;/description&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.5&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/todoapp/TodoappApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/todoapp/TodoappApplication.java" />
              <option name="updatedContent" value="package com.example.todoapp;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class TodoappApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(TodoappApplication.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/todoapp/controller/TodoController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/todoapp/controller/TodoController.java" />
              <option name="updatedContent" value="package com.example.todoapp.controller;&#10;&#10;import com.example.todoapp.model.Todo;&#10;import com.example.todoapp.service.TodoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/todos&quot;)&#10;public class TodoController {&#10;    @Autowired&#10;    private TodoService todoService;&#10;&#10;    @GetMapping&#10;    public List&lt;Todo&gt; getAllTodos() {&#10;        return todoService.getAllTodos();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Todo&gt; getTodoById(@PathVariable Long id) {&#10;        return todoService.getTodoById(id)&#10;                .map(ResponseEntity::ok)&#10;                .orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    @PostMapping&#10;    public Todo createTodo(@RequestBody Todo todo) {&#10;        return todoService.createTodo(todo);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Todo&gt; updateTodo(@PathVariable Long id, @RequestBody Todo todo) {&#10;        return ResponseEntity.ok(todoService.updateTodo(id, todo));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteTodo(@PathVariable Long id) {&#10;        todoService.deleteTodo(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/todoapp/model/Todo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/todoapp/model/Todo.java" />
              <option name="updatedContent" value="package com.example.todoapp.model;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;&#10;@Entity&#10;public class Todo {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    private String title;&#10;    private boolean completed;&#10;&#10;    public Todo() {}&#10;&#10;    public Todo(String title, boolean completed) {&#10;        this.title = title;&#10;        this.completed = completed;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return completed;&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        this.completed = completed;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/todoapp/repository/TodoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/todoapp/repository/TodoRepository.java" />
              <option name="updatedContent" value="package com.example.todoapp.repository;&#10;&#10;import com.example.todoapp.model.Todo;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface TodoRepository extends JpaRepository&lt;Todo, Long&gt; {&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/todoapp/service/TodoService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/todoapp/service/TodoService.java" />
              <option name="updatedContent" value="package com.example.todoapp.service;&#10;&#10;import com.example.todoapp.model.Todo;&#10;import com.example.todoapp.repository.TodoRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class TodoService {&#10;    @Autowired&#10;    private TodoRepository todoRepository;&#10;&#10;    public List&lt;Todo&gt; getAllTodos() {&#10;        return todoRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Todo&gt; getTodoById(Long id) {&#10;        return todoRepository.findById(id);&#10;    }&#10;&#10;    public Todo createTodo(Todo todo) {&#10;        return todoRepository.save(todo);&#10;    }&#10;&#10;    public void deleteTodo(Long id) {&#10;        todoRepository.deleteById(id);&#10;    }&#10;&#10;    public Todo updateTodo(Long id, Todo todoDetails) {&#10;        return todoRepository.findById(id).map(todo -&gt; {&#10;            todo.setTitle(todoDetails.getTitle());&#10;            todo.setCompleted(todoDetails.isCompleted());&#10;            return todoRepository.save(todo);&#10;        }).orElseGet(() -&gt; {&#10;            todoDetails.setId(id);&#10;            return todoRepository.save(todoDetails);&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>